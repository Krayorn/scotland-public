---
interface Props {
  className: string;
}

const { className } = Astro.props;
---

<div class={`pin ${className}`}>
  <svg id="marker_svg" viewBox="0 0 512 512">
    <g>
      <path
        id="marker"
        d="M256,390.634c13.353,0,25.482-6.804,32.448-18.201c48.81-79.857,106.992-185.103,106.992-232.994   C395.44,62.552,332.888,0,256,0S116.56,62.552,116.56,139.439c0,47.891,58.183,153.137,106.992,232.994   C230.518,383.83,242.648,390.634,256,390.634z M199.953,129.865c0-30.903,25.143-56.045,56.047-56.045s56.047,25.142,56.047,56.045   c0,30.904-25.143,56.046-56.047,56.046S199.953,160.77,199.953,129.865z"
      ></path>
    </g>
  </svg>
  <div class="circle"></div>
</div>

<style>
  .pin {
    position: absolute;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  .pin:hover .circle {
    animation: ext_circle_animation 1s ease-out infinite;
    visibility: visible;
  }

  .pin svg {
    width: 100px;
  }

  .pin:hover #marker_svg {
    animation: marker_animation 0.5s linear infinite alternate;
  }

  .highlight #marker_svg {
    animation: marker_animation 0.5s linear infinite alternate;
  }

  #marker_svg {
    width: 20px;
  }

  @keyframes marker_animation {
    from {
      width: 40px;
      /*     transform: translateY(0px) */
    }

    to {
      transform: translateY(-4px);
      width: 44px;
      /*     transform: rotate3d(0,1,0,150deg); */
    }
  }

  @keyframes ext_circle_animation {
    from {
      width: 20px;
      height: 20px;
      border-color: black;
    }

    to {
      width: 30px;
      height: 30px;
      border-color: rgba(0, 0, 0, 0);
    }
  }

  .circle {
    visibility: hidden;
    border: 5px solid black;
    width: 30px;
    height: 30px;
    margin-top: -25px;

    display: flex;
    align-items: center;
    justify-content: center;

    border-radius: 50%;

    transform: rotate3d(1, 0, 0, 60deg);
  }

  @media screen and (min-width: 992px) {
    #marker_svg {
      width: 40px;
    }
  }
</style>
